{"data":{"markdownRemark":{"fields":{"slug":"/2019-03-31-ionic2-hammer-js-example/"},"frontmatter":{"title":"Ionic2 - Hammer JS Example","date":"13 March 2017","excerpt":"Gesture event support is also one of the reason behind popularity of mobile applications. Capturing gesture events can be easily done in case of native mobile applications, since all the mobile platform expose gesture events in native code.","tags":["angular","Cordova","gesture","Hammer.js","Ionic"]},"html":"<p>Gesture event support is also one of the reason behind popularity of mobile\napplications. Capturing gesture events can be easily done in case of native\nmobile applications, since all the mobile platform expose gesture events in\nnative code. Since Hybrid mobile applications are built over html and\njavascript,  html don't support gesture events.\nThere could be scenario's, where you wants to provide support for your hybrid\nmobile application. In such cases, we can use Hammer.JS . Angular version 2\nalso provides support for Hammer.JS, about the same we will look into this\npost.\nLet's say we want to design a simple box, which we can rotate in any direction\nas shown\n<img src=\"/assets/ezgif.com-video-to-gif.gif\" alt=\"Hammer JS With Ionic\" title=\"Hammer JS With\nIonic\">\nHere we are trying to rotate the box in any direction by using Gesture events.\nTo perform rotation we need to use two fingers. Let's see how we can implement\nthe same in Ionic. Let's create a blank application using command\n<code class=\"language-text\">ionic start hammerjsExample blank --v2</code>\nNow let's add Hammer.JS into our application using the command\n<code class=\"language-text\">npm install hammerjs --save</code>\nWe will implement rotation event, which is by default disabled. So first we\nneed to enable rotation event. As we have mentioned earlier, angular version 2\nalso has support for Hammer.js. Let's see how we can achieve this.\nAngular defines defines one dependency token and one class, which can be used\nto customize behavior of Hammer.js. They are:</p>\n<ul>\n<li><strong>HAMMER<em>GESTURE</em>CONFIG</strong> : it can be used to provide HammerGestureConfig,\nwhich can be used to configure Hammer gestures</li>\n<li><strong>HammerGestureConfig</strong> : This class is helpful to override the default\nsettings of Hammer. To know more about the gesture events configuration,\nplease look into official documentation of Hammer.\nTo enable rotation first we need to import <strong>HAMMER<em>GESTURE</em>CONFIG</strong>,\n<strong>HammerGestureConfig</strong> into app.module.ts\n<code class=\"language-text\">import { HammerGestureConfig, HAMMER_GESTURE_CONFIG } from\n&#39;@angular/platform-browser&#39;;</code>\nNow let's create our own <strong>CustomHammerConfig</strong> class in app.module.ts, which\nwill extend class <strong>HammerGestureConfig</strong> to override Hammer.js Configuration.\n<code class=\"language-text\">export class CustomHammerConfig extends HammerGestureConfig {</code>\n<code class=\"language-text\">overrides = {</code>\n<code class=\"language-text\">&#39;rotate&#39;: { enable: true } //rotate is disabled by default, so we need to\nenable it</code>\n<code class=\"language-text\">}</code>\n<code class=\"language-text\">}</code>\nNow let's change providers in NgModule as shown\n<code class=\"language-text\">@NgModule({</code>\n<code class=\"language-text\">declarations: [</code>\n<code class=\"language-text\">MyApp,</code>\n<code class=\"language-text\">HomePage,</code>\n<code class=\"language-text\">RotateCustomeDirective</code>\n<code class=\"language-text\">],</code>\n<code class=\"language-text\">imports: [</code>\n<code class=\"language-text\">IonicModule.forRoot(MyApp)</code>\n<code class=\"language-text\">],</code>\n<code class=\"language-text\">bootstrap: [IonicApp],</code>\n<code class=\"language-text\">entryComponents: [</code>\n<code class=\"language-text\">MyApp,</code>\n<code class=\"language-text\">HomePage</code>\n<code class=\"language-text\">],</code>\n<code class=\"language-text\">providers: [{</code>\n<code class=\"language-text\">provide: ErrorHandler,</code>\n<code class=\"language-text\">useClass: IonicErrorHandler,</code>\n<code class=\"language-text\">}, {</code>\n<code class=\"language-text\">provide: HAMMER_GESTURE_CONFIG,</code>\n<code class=\"language-text\">useClass: CustomHammerConfig</code>\n<code class=\"language-text\">}]</code>\n<code class=\"language-text\">})</code>\n<code class=\"language-text\">export class AppModule { }</code>\nIn above code you can see <strong>RotateCustomeDirective</strong> in declarations section,\nfor now just understand it's the directive we are going to implement. To\ncapture Gesture events, let's create a directive. To create directive, create\na folder directives named in <em><strong>src folder</strong></em> of our ionic application. In\ndirectives folder, let's create a directive named <strong>RotateCustomeDirective</strong>\nin the file rotate-custom-directive.ts.\nLet's register <strong>rotatemove</strong> event using <strong>HostListener</strong>, as well as emit\nthe output angle using <strong>EventEmitter</strong>. The output will be applied to change\nthe angle of the object using style properties.\nOur custom directive <strong>RotateCustomeDirective</strong> code present in\n<em><strong>src/directives/rotate-custom-directive.ts</strong></em> will look something as shown\n<code class=\"language-text\">import { Directive, Output, EventEmitter, HostListener } from\n&#39;@angular/core&#39;;</code>\n<code class=\"language-text\">@Directive({</code>\n<code class=\"language-text\">selector: &#39;[rotateCustom]&#39;</code>\n<code class=\"language-text\">})</code>\n<code class=\"language-text\">export class RotateCustomeDirective {</code>\n<code class=\"language-text\">@Output() angleChange = new EventEmitter&lt;any&gt;();</code>\n<code class=\"language-text\">//although rotatestart is not required here, but we are keeping it here\nfor reference purpose</code>\n<code class=\"language-text\">/*</code>\n<code class=\"language-text\">@HostListener(&#39;rotatestart&#39;, [&#39;$event&#39;]) protected onRotateStart(event)\n{</code>\n<code class=\"language-text\">event.preventDefault();</code>\n<code class=\"language-text\">//put your code</code>\n<code class=\"language-text\">}</code>\n<code class=\"language-text\">*/</code>\n<code class=\"language-text\">@HostListener(&#39;rotatemove&#39;, [&#39;$event&#39;]) protected onRotateMove(event) {</code>\n<code class=\"language-text\">event.preventDefault();</code>\n<code class=\"language-text\">this.angleChange.emit({ angle: event.angle });</code>\n<code class=\"language-text\">}</code>\n<code class=\"language-text\">}</code>\nHere <strong>angleChange</strong> will be capture by the component, which will be rotated.\nit will return rotation angle which we will be using to implement rotation.\nLet's change the <strong>HomePage</strong>, to capture this event. First change the code\nfor <em><strong>home.html</strong></em>, <em><strong>home.scss</strong></em> and <em><strong>home.ts</strong></em> as shown\n<strong>home.html</strong>\n<code class=\"language-text\">&lt;ion-header&gt;</code>\n<code class=\"language-text\">&lt;ion-navbar&gt;</code>\n<code class=\"language-text\">&lt;ion-title&gt;</code>\n<code class=\"language-text\">Hammer JS Example</code>\n<code class=\"language-text\">&lt;/ion-title&gt;</code>\n<code class=\"language-text\">&lt;/ion-navbar&gt;</code>\n<code class=\"language-text\">&lt;/ion-header&gt;</code>\n<code class=\"language-text\">&lt;ion-content padding&gt;</code>\n<code class=\"language-text\">&lt;div anglechange class=&quot;box&quot; event onrotation rotatecustom style.transform\ntransformstyle&gt;</code>\n<code class=\"language-text\">&lt;div class=&quot;label&quot;&gt;</code>\n<code class=\"language-text\">{{title}}&lt;/div&gt;</code>\n<code class=\"language-text\">&lt;/div&gt;</code>\n<code class=\"language-text\">&lt;/ion-content&gt;</code>\nhere we applied <strong>rotateCustom</strong> on the div and registering <strong>OnRotation()</strong>\nevent to receive the angle for rotation. The received angle will be used to\nupdate style.transform css property using variable transformStyle.\n<strong>home.scss</strong>\n<code class=\"language-text\">page-home {</code>\n<code class=\"language-text\">}</code>\n<code class=\"language-text\">.box {</code>\n<code class=\"language-text\">margin: 50px 0 0 50px;</code>\n<code class=\"language-text\">width:200px;</code>\n<code class=\"language-text\">height:200px;</code>\n<code class=\"language-text\">background-color: #9933ff;</code>\n<code class=\"language-text\">}</code>\n<code class=\"language-text\">.box .label{</code>\n<code class=\"language-text\">text-align: center;</code>\n<code class=\"language-text\">color: #fff;</code>\n<code class=\"language-text\">font-weight: bold;</code>\n<code class=\"language-text\">font-size: 16px;</code>\n<code class=\"language-text\">padding: 45% 0 0 0;</code>\n<code class=\"language-text\">}</code>\n<code class=\"language-text\">.box:hover {</code>\n<code class=\"language-text\">cursor:pointer;</code>\n<code class=\"language-text\">}</code>\n<strong>home.ts</strong>\n<code class=\"language-text\">import { Component } from &#39;@angular/core&#39;;</code>\n<code class=\"language-text\">import { NavController} from &#39;ionic-angular&#39;;</code>\n<code class=\"language-text\">@Component({</code>\n<code class=\"language-text\">selector: &#39;page-home&#39;,</code>\n<code class=\"language-text\">templateUrl: &#39;home.html&#39;</code>\n<code class=\"language-text\">})</code>\n<code class=\"language-text\">export class HomePage {</code>\n<code class=\"language-text\">angle: Number;</code>\n<code class=\"language-text\">transformStyle: String;</code>\n<code class=\"language-text\">title = &#39;Rotate Me!&#39;;</code>\n<code class=\"language-text\">constructor(public navCtrl: NavController) {</code>\n<code class=\"language-text\">// set default angle to 0deg</code>\n<code class=\"language-text\">this.angle=0;</code>\n<code class=\"language-text\">this.transformStyle=&quot;rotate(0deg)&quot;;</code>\n<code class=\"language-text\">}</code>\n<code class=\"language-text\">onRotation(event: any): void {</code>\n<code class=\"language-text\">this.angle=event.angle;</code>\n<code class=\"language-text\">this.transformStyle=&quot;rotate(&quot;+this.angle+&quot;deg)&quot;;</code>\n<code class=\"language-text\">}</code>\n<code class=\"language-text\">}</code>\nIn constructor we applied zero degree be default. <strong>onRotation</strong> function will\ncapture the angle and update the transform variable to apply changes in style.\nThat's it, we are ready to build and run our application in mobile.\n<a href=\"https://github.com/nitishkumar71/hammerjsExample\">Github Link for Example</a></li>\n</ul>","id":"e8e8c67d-4793-554c-a7d3-24cbdd377223"}},"pageContext":{"pathSlug":"/2019-03-31-ionic2-hammer-js-example/","next":{"fields":{"slug":"/Ionic2-Cordova-Android-splash-screen-and-icon-is-not-working/"},"frontmatter":{"title":"Ionic2/Cordova - Android splash screen and icon is not working"},"fileAbsolutePath":"/media/nitish/3E1698381697EEE1/Practice/blog.nitishkumarsingh.xyz/posts/Ionic2-Cordova-Android-splash-screen-and-icon-is-not-working.md"},"previous":null}}