{"data":{"markdownRemark":{"fields":{"slug":"/2019-03-31-ionic2-hammer-js-example/"},"frontmatter":{"title":"Ionic2 - Hammer JS Example","date":"13 March 2017","excerpt":"Gesture event support is also one of the reason behind popularity of mobile applications. Capturing gesture events can be easily done in case of native mobile applications, since all the mobile platform expose gesture events in native code.","tags":["angular","Cordova","gesture","Hammer.js","Ionic"]},"html":"<p>Gesture event support is also one of the reason behind popularity of mobile\napplications. Capturing gesture events can be easily done in case of native\nmobile applications, since all the mobile platform expose gesture events in\nnative code. Since Hybrid mobile applications are built over html and\njavascript,  html don't support gesture events.\nThere could be scenario's, where you wants to provide support for your hybrid\nmobile application. In such cases, we can use Hammer.JS . Angular version 2\nalso provides support for Hammer.JS, about the same we will look into this\npost.\nLet's say we want to design a simple box, which we can rotate in any direction\nas shown\n<img src=\"/assets/ezgif.com-video-to-gif.gif\" alt=\"Hammer JS With Ionic\" title=\"Hammer JS With\nIonic\"></p>\n<p>Here we are trying to rotate the box in any direction by using Gesture events.\nTo perform rotation we need to use two fingers. Let's see how we can implement\nthe same in Ionic. Let's create a blank application using command</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ionic start hammerjsExample blank --v2</code></pre></div>\n<p>Now let's add Hammer.JS into our application using the command</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install hammerjs --save</code></pre></div>\n<p>We will implement rotation event, which is by default disabled. So first we\nneed to enable rotation event. As we have mentioned earlier, angular version 2\nalso has support for Hammer.js. Let's see how we can achieve this.\nAngular defines defines one dependency token and one class, which can be used\nto customize behavior of Hammer.js. They are:</p>\n<ul>\n<li><strong>HAMMER<em>GESTURE</em>CONFIG</strong> : it can be used to provide HammerGestureConfig,\nwhich can be used to configure Hammer gestures</li>\n<li><strong>HammerGestureConfig</strong> : This class is helpful to override the default\nsettings of Hammer. To know more about the gesture events configuration,\nplease look into official documentation of Hammer.</li>\n</ul>\n<p>To enable rotation first we need to import <strong>HAMMER<em>GESTURE</em>CONFIG</strong>,\n<strong>HammerGestureConfig</strong> into app.module.ts</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { HammerGestureConfig, HAMMER_GESTURE_CONFIG } from &#39;@angular/platform-browser&#39;;</code></pre></div>\n<p>Now let's create our own <strong>CustomHammerConfig</strong> class in app.module.ts, which\nwill extend class <strong>HammerGestureConfig</strong> to override Hammer.js Configuration.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">export class CustomHammerConfig extends HammerGestureConfig {\n  overrides = {\n  &#39;rotate&#39;: { enable: true } \n  //rotate is disabled by default, so we need to enable it\n  }\n}</code></pre></div>\n<p>Now let's change providers in NgModule as shown</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@NgModule({\n    declarations: [\n        MyApp,\n        HomePage,\n        RotateCustomeDirective\n    ],\n    imports: [\n        IonicModule.forRoot(MyApp)\n    ],\n    bootstrap: [IonicApp],\n    entryComponents: [\n        MyApp,\n        HomePage\n    ],\n    providers: [{\n        provide: ErrorHandler,\n        useClass: IonicErrorHandler,\n    }, {\n        provide: HAMMER_GESTURE_CONFIG,\n        useClass: CustomHammerConfig\n    }]\n})\nexport class AppModule { }</code></pre></div>\n<p>In above code you can see <strong>RotateCustomeDirective</strong> in declarations section,\nfor now just understand it's the directive we are going to implement. To\ncapture Gesture events, let's create a directive. To create directive, create\na folder directives named in <em><strong>src folder</strong></em> of our ionic application. In\ndirectives folder, let's create a directive named <strong>RotateCustomeDirective</strong>\nin the file rotate-custom-directive.ts.</p>\n<p>Let's register <strong>rotatemove</strong> event using <strong>HostListener</strong>, as well as emit\nthe output angle using <strong>EventEmitter</strong>. The output will be applied to change\nthe angle of the object using style properties.\nOur custom directive <strong>RotateCustomeDirective</strong> code present in\n<em><strong>src/directives/rotate-custom-directive.ts</strong></em> will look something as shown</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { Directive, Output, EventEmitter, HostListener } from &#39;@angular/core&#39;;\n@Directive({\n    selector: &#39;[rotateCustom]&#39;\n})\nexport class RotateCustomeDirective {\n    @Output() angleChange = new EventEmitter&lt;any&gt;();\n    //although rotatestart is not required here, but we are keeping it here for reference purpose\n    /*\n    @HostListener(&#39;rotatestart&#39;, [&#39;$event&#39;]) protected onRotateStart(event)\n    {\n    event.preventDefault();\n    //put your code\n    }\n    */\n    @HostListener(&#39;rotatemove&#39;, [&#39;$event&#39;]) protected onRotateMove(event) {\n        event.preventDefault();\n        this.angleChange.emit({ angle: event.angle });\n    }\n}</code></pre></div>\n<p>Here <strong>angleChange</strong> will be capture by the component, which will be rotated.\nit will return rotation angle which we will be using to implement rotation.\nLet's change the <strong>HomePage</strong>, to capture this event. First change the code\nfor <em><strong>home.html</strong></em>, <em><strong>home.scss</strong></em> and <em><strong>home.ts</strong></em> as shown\n<strong>home.html</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;ion-header&gt;\n  &lt;ion-navbar&gt;\n    &lt;ion-title&gt;\n    Hammer JS Example\n    &lt;/ion-title&gt;\n  &lt;/ion-navbar&gt;\n&lt;/ion-header&gt;\n&lt;ion-content padding&gt;\n  &lt;div anglechange class=&quot;box&quot; event onrotation rotatecustom style.transform transformstyle&gt;\n    &lt;div class=&quot;label&quot;&gt;{{title}}&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/ion-content&gt;</code></pre></div>\n<p>here we applied <strong>rotateCustom</strong> on the div and registering <strong>OnRotation()</strong>\nevent to receive the angle for rotation. The received angle will be used to\nupdate style.transform css property using variable transformStyle.\n<strong>home.scss</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">page-home {\n}\n\n.box {\n  margin: 50px 0 0 50px;\n  width:200px;\n  height:200px;\n  background-color: #9933ff;\n}\n\n.box .label{\n  text-align: center;\n  color: #fff;\n  font-weight: bold;\n  font-size: 16px;\n  padding: 45% 0 0 0;\n}\n\n.box:hover {\n  cursor:pointer;\n}</code></pre></div>\n<p><strong>home.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { Component } from &#39;@angular/core&#39;;\nimport { NavController } from &#39;ionic-angular&#39;;\n@Component({\n    selector: &#39;page-home&#39;,\n    templateUrl: &#39;home.html&#39;\n})\nexport class HomePage {\n    angle: Number;\n    transformStyle: String;\n    title = &#39;Rotate Me!&#39;;\n    constructor(public navCtrl: NavController) {\n        // set default angle to 0deg\n        this.angle = 0;\n        this.transformStyle = &quot;rotate(0deg)&quot;;\n    }\n    onRotation(event: any): void {\n        this.angle = event.angle;\n        this.transformStyle = &quot;rotate(&quot; + this.angle + &quot;deg)&quot;;\n    }\n}</code></pre></div>\n<p>In constructor we applied zero degree be default. <strong>onRotation</strong> function will\ncapture the angle and update the transform variable to apply changes in style.\nThat's it, we are ready to build and run our application in mobile.\n<a href=\"https://github.com/nitishkumar71/hammerjsExample\">Github Link for Example</a></p>","id":"e8e8c67d-4793-554c-a7d3-24cbdd377223"}},"pageContext":{"pathSlug":"/2019-03-31-ionic2-hammer-js-example/","next":{"fields":{"slug":"/2019-03-31-ionic2-secure-storage-in-mobile-application/"},"frontmatter":{"title":"Ionic2 - Secure Storage in mobile application"},"fileAbsolutePath":"/media/nitish/3E1698381697EEE1/Practice/blog.nitishkumarsingh.xyz/posts/2019-03-31-ionic2-secure-storage-in-mobile-application.md"},"previous":{"fields":{"slug":"/2019-04-01-ionic-using-chart-js/"},"frontmatter":{"title":"Ionic - Using Chart.js"},"fileAbsolutePath":"/media/nitish/3E1698381697EEE1/Practice/blog.nitishkumarsingh.xyz/posts/2019-04-01-ionic-using-chart-js.md"}}}